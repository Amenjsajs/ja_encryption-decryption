type: edu
custom_name: stage6
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: true
- name: src/encryptdecrypt/Encoder.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.*;

    public class Encoder {
        private int salt = 0;

        public Encoder() {
        }

        public Encoder(int salt) {
            this.salt = salt;
        }

        private String simpleEncode(String msg) {
            StringBuilder encode = new StringBuilder();
            char[] chars = msg.toCharArray();
            for (char c : chars) {
                if (c >= 'a' && c <= 'z') {
                    encode.append((char) ('z' - c + 'a'));
                } else if (c >= 'A' && c <= 'Z') {
                    encode.append((char) ('Z' - c + 'A'));
                } else {
                    encode.append(c);
                }
            }
            return encode.toString();
        }

        private String encodeWithSalt(String msg, int salt) {
            StringBuilder encode = new StringBuilder();
            char[] chars = msg.toCharArray();
            for (char c : chars) {
                encode.append((char) (c + salt));
            }
            return encode.toString();
        }

        private String readFile(String path) throws IOException {
            BufferedReader file = new BufferedReader(new FileReader(path));
            String re = file.readLine();
            file.close();
            return re;
        }

        private void writeFile(String path, String text) throws IOException {
            BufferedWriter file = new BufferedWriter(new FileWriter(path));
            file.write(text);
            file.close();
        }

        private String coderEncode(String msg, String outPath) throws IOException {
            if (outPath == null) {
                return encode(msg);
            }
            writeFile(outPath, encode(msg));
            return "";
        }

        private String coderDecode(String msg, String outPath) throws IOException {
            if (outPath == null) {
                return decode(msg);
            }
            writeFile(outPath, decode(msg));
            return "";
        }

        public String encode(String msg, String inPath, String outPath) throws IOException {
            if (!msg.isEmpty()) {
                return coderEncode(msg, outPath);
            } else if (inPath != null) {
                return coderEncode(readFile(inPath), outPath);
            }
            return "";
        }

        private String encode(String msg) {
            return msg.isEmpty() ? "" : encodeWithSalt(msg, salt);
        }

        public String decode(String msg) {
            if (msg.isEmpty()) {
                return "";
            }
            StringBuilder decode = new StringBuilder();
            char[] chars = msg.toCharArray();
            for (char c : chars) {
                decode.append((char) (c - salt));
            }

            return decode.toString();
        }

        public String decode(String msg, String inPath, String outPath) throws IOException {
            if (!msg.isEmpty()) {
                return coderDecode(msg, outPath);
            } else if (inPath != null) {
                return coderDecode(readFile(inPath), outPath);
            }

            return "";
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5392#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 05 Jan 2023 13:23:52 UTC
record: -1
